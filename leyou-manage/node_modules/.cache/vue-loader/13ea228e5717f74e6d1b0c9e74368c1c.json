{"remainingRequest":"C:\\lesson\\heima92\\code\\leyou-manage\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\lesson\\heima92\\code\\leyou-manage\\src\\views\\item\\goods\\GoodsForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\lesson\\heima92\\code\\leyou-manage\\src\\views\\item\\goods\\GoodsForm.vue","mtime":1584615205045},{"path":"C:\\lesson\\heima92\\code\\leyou-manage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\lesson\\heima92\\code\\leyou-manage\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\lesson\\heima92\\code\\leyou-manage\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\lesson\\heima92\\code\\leyou-manage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\lesson\\heima92\\code\\leyou-manage\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"goods-form\",\n  props: {\n    oldGoods: {\n      type: Object\n    },\n    isEdit: {\n      type: Boolean,\n      default: false\n    },\n    step: {\n      type: Number,\n      default: 1\n    }\n  },\n  data() {\n    return {\n      valid: false,\n      goods: {\n        categories: [], // 商品分类信息\n        brandId: 0, // 品牌id信息\n        name: \"\", // 标题\n        title: \"\", // 子标题\n        spuDetail: {\n          packingList: \"\", // 包装列表\n          afterService: \"\", // 售后服务\n          description: \"\" // 商品描述\n        }\n      },\n      brandOptions: [], // 品牌列表\n      specs: [], // 规格参数的模板\n      specialSpecs: [], // 特有规格参数模板\n    };\n  },\n  methods: {\n    submit() {\n      if (this.isEdit) {\n        this.handleEdit();\n      } else {\n        this.handleAdd();\n      }\n    },\n    handleAdd() {\n      // 表单校验。\n      if (!this.$refs.basic.validate) {\n        this.$message.error(\"请先完成表单内容！\");\n      }\n      // 先处理goods，用结构表达式接收,除了categories外，都接收到goodsParams中\n      const {\n        categories: [{id: cid1}, {id: cid2}, {id: cid3}],\n        ...goodsParams\n      } = this.goods;\n      // 处理规格参数\n      const specs = {};\n      this.specs.forEach(({id, v}) => {\n        specs[id] = v;\n      });\n      this.specialSpecs.forEach(({id, options}) => {\n        specs[id] = options;\n      });\n      // 处理sku\n      const skus = this.skus\n        .filter(s => s.enable)\n        .map(({price, stock, enable, images, indexes, ...rest}) => {\n          // 标题，在spu的name基础上，拼接特有规格属性值\n          const title = goodsParams.name + \" \" + Object.values(rest).map(v => v.v).join(\" \");\n          const obj = {};\n          Object.values(rest).forEach(v => {\n            obj[v.id] = v.v;\n          });\n          return {\n            price: this.$format(price), // 价格需要格式化\n            stock,\n            indexes,\n            title, // 基本属性\n            images: images ? images.join(\",\") : '', // 图片\n            specialSpec: JSON.stringify(obj) // 特有规格参数\n          };\n        });\n      Object.assign(goodsParams, {\n        cid1,\n        cid2,\n        cid3, // 商品分类\n        skus // sku列表\n      });\n      goodsParams.spuDetail.specification = JSON.stringify(specs);\n      this.$http({\n          method: this.isEdit ? \"put\" : \"post\",\n          url: \"/item/goods\",\n          data: goodsParams\n        })\n        .then(() => {\n          // 成功，关闭窗口\n          this.$emit(\"close\");\n          // 提示成功\n          this.$message.success(\"保存成功了\");\n        })\n        .catch(() => {\n          this.$message.error(\"保存失败！\");\n        });\n    },\n    handleEdit() {\n      // 1.判断spu是否修改\n      // 1.1.获取spu\n      let {id, categories, brandId, name, title} = this.goods;\n      let spu = {id, brandId, name, title, cid1: categories[0].id, cid2: categories[1].id, cid3: categories[2].id};\n      let spuTitle = title;\n      // 1.2.判断spu是否有修改\n      const isSpuChange = !Object.compareObj(spu, this.oldGoods);\n      if (!isSpuChange) {\n        spu = {};\n      }\n      // 2.判断spuDetail是否修改\n\n      let {...detail} = this.goods.spuDetail;\n      const specs = {};\n      this.specs.forEach(({id, v}) => {\n        specs[id] = v;\n      });\n      this.specialSpecs.forEach(({id, options}) => {\n        specs[id] = options;\n      });\n      detail.specification = JSON.stringify(specs);\n      // 2.3.判断spuDetail是否有修改\n      let isDetailChange = false;\n      for (let k in detail) {\n        if(detail[k] !== this.oldGoods.spuDetail[k]){\n          isDetailChange = true;\n        }else{\n          delete detail[k];\n        }\n      }\n      if (isDetailChange) {\n        detail.spuId = this.goods.id;\n\n        spu.spuDetail = detail;\n      }\n      // 3.判断sku是否修改\n      // 3.1.处理sku\n      const skus = this.skus\n        .map(({title, price, stock, enable, images, indexes, id, ...rest}) => {\n          if(!enable){\n            return {id, enable:false}\n          }\n          const obj = {};\n          Object.values(rest).forEach(v => {\n            obj[v.id] = v.v;\n          });\n          return {\n            id,\n            title: title || spuTitle + \" \" + Object.values(obj).join(\" \"),\n            price: this.$format(price), // 价格需要格式化\n            stock,\n            indexes,\n            images: images ? images.join(\",\") : '', // 图片\n            specialSpec: JSON.stringify(obj) // 特有规格参数\n          };\n        });\n      // 3.3.判断sku是否修改\n      let isSkuChange = false;\n      for (let i = 0; i < skus.length; i++) {\n        let s = skus[i];\n        let os = this.oldGoods.skus.find(v => v.id === s.id);\n        if (!Object.compareObj(s, os)) {\n          isSkuChange = true;\n          if(!os && s.enable === false){\n            skus.splice(i, 1);\n            i--;\n          }else if(os && s.enable === false){\n            s.saleable = false;\n          }\n        }else{\n          skus.splice(i, 1);\n          i--;\n        }\n        s.spuId = id;\n      }\n      if (isSkuChange) {\n        spu.skus = skus;\n      }\n      if (isSpuChange || isSkuChange || isDetailChange) {\n        // 4.发起请求\n        this.$http.put(\"/item/goods\", spu)\n          .then(() => {\n            // 成功，关闭窗口\n            this.$emit(\"close\");\n            // 提示成功\n            this.$message.success(\"保存成功了\");\n          })\n          .catch(() => {\n            this.$message.error(\"保存失败！\");\n          });\n      } else {\n        // 成功，关闭窗口\n        this.$emit(\"close\");\n        // 提示成功\n        this.$message.warning(\"商品没有修改！\");\n      }\n    }\n  },\n  watch: {\n    oldGoods: {\n      deep: true,\n      handler(val) {\n        if (!this.isEdit) {\n          Object.assign(this.goods, {\n            categories: null, // 商品分类信息\n            brandId: 0, // 品牌id信息\n            name: \"\", // 标题\n            title: \"\", // 子标题\n            spuDetail: {\n              packingList: \"\", // 包装列表\n              afterService: \"\", // 售后服务\n              description: \"\" // 商品描述\n            }\n          });\n          this.specs = [];\n          this.specialSpecs = [];\n        } else {\n          this.goods = Object.deepCopy(val);\n\n          // 先得到分类名称\n          const names = val.categoryName.split(\"/\");\n          delete this.goods.categoryName;\n          delete this.goods.brandName;\n          delete this.goods.createTime;\n          delete this.goods.saleable;\n          // 组织商品分类数据\n          this.goods.categories = [\n            {id: val.cid1, name: names[0]},\n            {id: val.cid2, name: names[1]},\n            {id: val.cid3, name: names[2]}\n          ];\n\n          // 将skus处理成map\n          const skuMap = new Map();\n          this.goods.skus.forEach(s => {\n            s.enable = true;\n            skuMap.set(s.indexes, s);\n          });\n          this.goods.skus = skuMap;\n        }\n      }\n    },\n    \"goods.categories\": {\n      deep: true,\n      handler(val) {\n        // 判断商品分类是否存在，存在才查询\n        if (val && val.length > 0) {\n          // 根据分类查询品牌\n          this.$http\n            .get(\"/item/brand/of/category?id=\" + this.goods.categories[2].id)\n            .then(({data}) => {\n              this.brandOptions = data;\n            });\n          // 根据分类查询规格参数\n          this.$http\n            .get(\"/item/spec/params?categoryId=\" + this.goods.categories[2].id)\n            .then(({data}) => {\n              let specs = [];\n              let template = [];\n              if (this.isEdit) {\n                specs = JSON.parse(this.goods.spuDetail.specification);\n              }\n              // 对特有规格进行筛选\n              const arr1 = [];\n              const arr2 = [];\n              data.forEach(({id, name, generic, numeric, unit, options}) => {\n                if (generic) {\n                  const o = {id, name, numeric, unit, ops: options ? options.split(',') : []};\n                  if (this.isEdit) {\n                    o.v = specs[id];\n                  }\n                  arr1.push(o)\n                } else {\n                  const o = {id, name, options: [], ops: options ? options.split(',') : []};\n                  if (this.isEdit) {\n                    o.options = specs[id];\n                  }\n                  arr2.push(o)\n                }\n              });\n              this.specs = arr1;// 通用规格\n              this.specialSpecs = arr2;// 特有规格\n            });\n        }\n      }\n    },\n    goods: {\n      deep: true,\n      handler() {\n        if (this.isEdit) {\n          this.modified = true;\n        }\n      }\n    }\n  },\n  computed: {\n    skus() {\n      // 过滤掉用户没有填写数据的规格参数\n      const arr = this.specialSpecs.filter(s => s.options.length > 0);\n      // 通过reduce进行累加笛卡尔积\n      return arr.reduce(\n        (last, spec, index) => {\n          const result = [];\n          last.forEach(o => {\n            spec.options.forEach((option, i) => {\n              const obj = JSON.parse(JSON.stringify(o));\n              obj[spec.name] = {v: option, id: spec.id};\n              obj.indexes = (obj.indexes || '') + '_' + i\n              if (index === arr.length - 1) {\n                obj.indexes = obj.indexes.substring(1);\n                // 如果发现是最后一组，则添加价格、库存等字段\n                Object.assign(obj, {\n                  price: 0,\n                  stock: 0,\n                  enable: false,\n                  images: []\n                });\n                if (this.isEdit) {\n                  // 如果是编辑，则回填sku信息\n                  const sku = this.goods.skus.get(obj.indexes);\n                  if (sku != null) {\n                    const {title, price, stock, enable, images, id} = sku;\n                    Object.assign(obj, {\n                      id,\n                      price: this.$format(price),\n                      title,\n                      stock,\n                      enable,\n                      images: images ? images.split(\",\") : [],\n                    });\n                  }\n                }\n              }\n              result.push(obj);\n            });\n          });\n          return result;\n        },\n        [{}]\n      );\n    },\n    headers() {\n      if (this.skus.length <= 0) {\n        return [];\n      }\n      const headers = [];\n      Object.keys(this.skus[0]).forEach(k => {\n        let value = k;\n        let width = \"\";\n        if (k === \"price\") {\n          // enable，表头要翻译成“价格”\n          k = \"价格\";\n          width = \"120px\";\n        } else if (k === \"stock\") {\n          // enable，表头要翻译成“库存”\n          width = \"120px\";\n          k = \"库存\";\n        } else if (k === \"enable\") {\n          // enable，表头要翻译成“是否启用”\n          width = \"80px\";\n          k = \"是否启用\";\n        } else if (k === \"images\" || k === 'indexes' || k === 'id' || k === 'title') {\n          // 图片和索引不在表格中展示\n          return;\n        }\n        headers.push({\n          text: k,\n          align: \"center\",\n          sortable: false,\n          value,\n          width\n        });\n      });\n      return headers;\n    }\n  }\n};\n",{"version":3,"sources":["GoodsForm.vue"],"names":[],"mappingsfile":"GoodsForm.vue","sourceRoot":"src/views/item/goods","sourcesContent":["<template>\r\n  <v-stepper v-model=\"step\" class=\"elevation-0\">\r\n    <v-stepper-header>\r\n      <v-stepper-step :complete=\"step > 1\" step=\"1\">基本信息</v-stepper-step>\r\n      <v-divider/>\r\n      <v-stepper-step :complete=\"step > 2\" step=\"2\">商品描述</v-stepper-step>\r\n      <v-divider/>\r\n      <v-stepper-step :complete=\"step > 3\" step=\"3\">规格参数</v-stepper-step>\r\n      <v-divider/>\r\n      <v-stepper-step step=\"4\">SKU属性</v-stepper-step>\r\n    </v-stepper-header>\r\n    <v-stepper-items>\r\n      <!--1、基本信息-->\r\n      <v-stepper-content step=\"1\">\r\n        <v-flex class=\"xs10 mx-auto\">\r\n          <v-form v-model=\"valid\" ref=\"basic\">\r\n            <!--商品分类-->\r\n            <v-cascader\r\n                url=\"/item/category/of/parent\"\r\n                required\r\n                showAllLevels\r\n                v-model=\"goods.categories\"\r\n                label=\"请选择商品分类\"/>\r\n            <!--品牌-->\r\n            <v-autocomplete\r\n                :items=\"brandOptions\"\r\n                item-text=\"name\"\r\n                item-value=\"id\"\r\n                label=\"所属品牌\"\r\n                v-model=\"goods.brandId\"\r\n                required\r\n                autocomplete\r\n                clearable\r\n                dense chips\r\n                :rules=\"[v => !!v || '品牌不能为空']\"\r\n            >\r\n              <template slot=\"selection\" slot-scope=\"data\">\r\n                <v-chip small>{{ data.item.name}}</v-chip>\r\n              </template>\r\n            </v-autocomplete>\r\n            <v-text-field label=\"商品名称\" v-model=\"goods.name\" :counter=\"200\" required :rules=\"[v => !!v || '商品标题不能为空']\"/>\r\n            <v-textarea label=\"商品标题(会影响到搜索排名)\" v-model=\"goods.title\" :rows=\"4\" :counter=\"200\"/>\r\n          </v-form>\r\n        </v-flex>\r\n      </v-stepper-content>\r\n      <!--2、商品描述-->\r\n      <v-stepper-content step=\"2\">\r\n        <v-textarea label=\"包装清单\" v-model=\"goods.spuDetail.packingList\" :counter=\"1000\" :rows=\"3\" hide-details/>\r\n        <v-textarea label=\"售后服务\" v-model=\"goods.spuDetail.afterService\" :counter=\"1000\" :rows=\"3\" hide-details\r\n                    class=\"mb-4\"/>\r\n        <span class=\"subheading font-weight-thin\">商品描述</span>\r\n        <v-editor v-model=\"goods.spuDetail.description\" url=\"/auth/ali/oss/signature\" needSignature class=\"mt-3\"/>\r\n      </v-stepper-content>\r\n      <!--3、规格参数-->\r\n      <v-stepper-content step=\"3\">\r\n        <v-card>\r\n          <v-flex xs3 class=\"headline mx-auto\">通用规格属性</v-flex>\r\n          <v-card-text>\r\n            <v-container grid-list-md fluid class=\"mt-0\">\r\n\r\n              <v-layout wrap row justify-space-between class=\"px-4\">\r\n                <v-flex xs12 sm5 v-for=\"param in specs\" :key=\"param.name\">\r\n                  <v-select :label=\"param.name\" :items=\"param.ops\" v-model=\"param.v\"\r\n                            v-if=\"param.ops && param.ops.length > 0\"></v-select>\r\n                  <v-text-field v-else :label=\"param.name\" v-model=\"param.v\" :suffix=\"param.unit || ''\"\r\n                  />\r\n                </v-flex>\r\n              </v-layout>\r\n            </v-container>\r\n          </v-card-text>\r\n        </v-card>\r\n        <!--遍历特有规格参数-->\r\n        <v-divider></v-divider>\r\n        <v-card>\r\n          <v-flex xs3 class=\"headline mx-auto\">特有用规格属性</v-flex>\r\n          <v-card-text>\r\n            <v-card flat v-for=\"spec in specialSpecs\" :key=\"spec.name\">\r\n              <!--特有参数的标题-->\r\n              <v-flex class=\"subheading\">{{spec.name}}:</v-flex>\r\n              <!--特有参数的待选项，需要判断是否有options，如果没有，展示文本框，让用户自己输入-->\r\n              <v-flex>\r\n                <v-card-text class=\"px-4\">\r\n                  <v-container grid-list-md fluid class=\"mt-0\" v-if=\"spec.ops && spec.ops.length > 0\">\r\n                    <v-layout wrap row justify-space-between class=\"px-4\">\r\n                      <v-flex xs12 sm3 v-for=\"(o,i) in spec.ops\" :key=\"o\">\r\n                        <v-checkbox :label=\"o\" :value=\"o\" v-model=\"spec.options\" color=\"primary\" hide-details/>\r\n                      </v-flex>\r\n                    </v-layout>\r\n                  </v-container>\r\n\r\n                  <v-container v-else grid-list-md fluid class=\"mt-0\">\r\n                    <v-layout wrap row justify-space-between class=\"px-4\">\r\n                      <v-flex xs12 sm6 v-for=\"i in spec.options.length+1\" :key=\"i\" class=\"row layout\">\r\n                        <v-text-field :placeholder=\"'新的' + spec.name + ':'\" class=\"flex xs10\" auto-grow\r\n                                      v-model=\"spec.options[i-1]\" v-bind:value=\"i\" single-line hide-details/>\r\n                        <v-btn @click=\"spec.options.splice(i-1,1)\" v-if=\"i <= spec.options.length\" icon>\r\n                          <i class=\"el-icon-delete\"/>\r\n                        </v-btn>\r\n                      </v-flex>\r\n                    </v-layout>\r\n                  </v-container>\r\n                  <v-divider></v-divider>\r\n                </v-card-text>\r\n              </v-flex>\r\n            </v-card>\r\n          </v-card-text>\r\n        </v-card>\r\n\r\n\r\n      </v-stepper-content>\r\n      <!--4、SKU属性-->\r\n      <v-stepper-content step=\"4\">\r\n        <v-flex class=\"mx-auto\">\r\n\r\n          <v-card class=\"elevation-0\">\r\n            <!--标题-->\r\n            <div class=\"subheading py-3\">SKU列表:</div>\r\n            <v-divider/>\r\n            <!--SKU表格，hide-actions因此分页等工具条-->\r\n            <v-data-table :items=\"skus\" :headers=\"headers\" hide-actions item-key=\"indexes\" class=\"elevation-0\">\r\n              <template slot=\"items\" slot-scope=\"props\">\r\n                <tr @click=\"props.expanded = !props.expanded\">\r\n                  <!--价格和库存展示为文本框-->\r\n                  <td v-for=\"(v,k) in props.item\" :key=\"k\" v-if=\"['price', 'stock'].includes(k)\"\r\n                      class=\"text-xs-center\">\r\n                    <v-text-field single-line v-model=\"props.item[k]\" @click.stop=\"\"/>\r\n                  </td>\r\n                  <!--enable展示为checkbox-->\r\n                  <td class=\"text-xs-center\" v-else-if=\"k === 'enable'\">\r\n                    <v-checkbox v-model=\"props.item[k]\"/>\r\n                  </td>\r\n                  <!--indexes和images不展示，其它展示为普通文本-->\r\n                  <td class=\"text-xs-center\" v-else-if=\"k !== 'images' && k !== 'indexes'&& k !== 'id'\">{{v.v}}</td>\r\n                </tr>\r\n              </template>\r\n              <!--点击表格后展开-->\r\n              <template slot=\"expand\" slot-scope=\"props\">\r\n                <v-card class=\"elevation-2 flex xs11 mx-auto my-2\">\r\n                  <!--图片上传组件-->\r\n                  <v-upload v-model=\"props.item.images\" url=\"/auth/ali/oss/signature\" needSignature/>\r\n                </v-card>\r\n              </template>\r\n            </v-data-table>\r\n          </v-card>\r\n        </v-flex>\r\n        <!--提交按钮-->\r\n        <v-flex xs3 offset-xs9>\r\n          <v-btn color=\"info\" @click=\"submit\">保存商品信息</v-btn>\r\n        </v-flex>\r\n      </v-stepper-content>\r\n    </v-stepper-items>\r\n  </v-stepper>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: \"goods-form\",\r\n    props: {\r\n      oldGoods: {\r\n        type: Object\r\n      },\r\n      isEdit: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      step: {\r\n        type: Number,\r\n        default: 1\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        valid: false,\r\n        goods: {\r\n          categories: [], // 商品分类信息\r\n          brandId: 0, // 品牌id信息\r\n          name: \"\", // 标题\r\n          title: \"\", // 子标题\r\n          spuDetail: {\r\n            packingList: \"\", // 包装列表\r\n            afterService: \"\", // 售后服务\r\n            description: \"\" // 商品描述\r\n          }\r\n        },\r\n        brandOptions: [], // 品牌列表\r\n        specs: [], // 规格参数的模板\r\n        specialSpecs: [], // 特有规格参数模板\r\n      };\r\n    },\r\n    methods: {\r\n      submit() {\r\n        if (this.isEdit) {\r\n          this.handleEdit();\r\n        } else {\r\n          this.handleAdd();\r\n        }\r\n      },\r\n      handleAdd() {\r\n        // 表单校验。\r\n        if (!this.$refs.basic.validate) {\r\n          this.$message.error(\"请先完成表单内容！\");\r\n        }\r\n        // 先处理goods，用结构表达式接收,除了categories外，都接收到goodsParams中\r\n        const {\r\n          categories: [{id: cid1}, {id: cid2}, {id: cid3}],\r\n          ...goodsParams\r\n        } = this.goods;\r\n        // 处理规格参数\r\n        const specs = {};\r\n        this.specs.forEach(({id, v}) => {\r\n          specs[id] = v;\r\n        });\r\n        this.specialSpecs.forEach(({id, options}) => {\r\n          specs[id] = options;\r\n        });\r\n        // 处理sku\r\n        const skus = this.skus\r\n          .filter(s => s.enable)\r\n          .map(({price, stock, enable, images, indexes, ...rest}) => {\r\n            // 标题，在spu的name基础上，拼接特有规格属性值\r\n            const title = goodsParams.name + \" \" + Object.values(rest).map(v => v.v).join(\" \");\r\n            const obj = {};\r\n            Object.values(rest).forEach(v => {\r\n              obj[v.id] = v.v;\r\n            });\r\n            return {\r\n              price: this.$format(price), // 价格需要格式化\r\n              stock,\r\n              indexes,\r\n              title, // 基本属性\r\n              images: images ? images.join(\",\") : '', // 图片\r\n              specialSpec: JSON.stringify(obj) // 特有规格参数\r\n            };\r\n          });\r\n        Object.assign(goodsParams, {\r\n          cid1,\r\n          cid2,\r\n          cid3, // 商品分类\r\n          skus // sku列表\r\n        });\r\n        goodsParams.spuDetail.specification = JSON.stringify(specs);\r\n        this.$http({\r\n            method: this.isEdit ? \"put\" : \"post\",\r\n            url: \"/item/goods\",\r\n            data: goodsParams\r\n          })\r\n          .then(() => {\r\n            // 成功，关闭窗口\r\n            this.$emit(\"close\");\r\n            // 提示成功\r\n            this.$message.success(\"保存成功了\");\r\n          })\r\n          .catch(() => {\r\n            this.$message.error(\"保存失败！\");\r\n          });\r\n      },\r\n      handleEdit() {\r\n        // 1.判断spu是否修改\r\n        // 1.1.获取spu\r\n        let {id, categories, brandId, name, title} = this.goods;\r\n        let spu = {id, brandId, name, title, cid1: categories[0].id, cid2: categories[1].id, cid3: categories[2].id};\r\n        let spuTitle = title;\r\n        // 1.2.判断spu是否有修改\r\n        const isSpuChange = !Object.compareObj(spu, this.oldGoods);\r\n        if (!isSpuChange) {\r\n          spu = {};\r\n        }\r\n        // 2.判断spuDetail是否修改\r\n\r\n        let {...detail} = this.goods.spuDetail;\r\n        const specs = {};\r\n        this.specs.forEach(({id, v}) => {\r\n          specs[id] = v;\r\n        });\r\n        this.specialSpecs.forEach(({id, options}) => {\r\n          specs[id] = options;\r\n        });\r\n        detail.specification = JSON.stringify(specs);\r\n        // 2.3.判断spuDetail是否有修改\r\n        let isDetailChange = false;\r\n        for (let k in detail) {\r\n          if(detail[k] !== this.oldGoods.spuDetail[k]){\r\n            isDetailChange = true;\r\n          }else{\r\n            delete detail[k];\r\n          }\r\n        }\r\n        if (isDetailChange) {\r\n          detail.spuId = this.goods.id;\r\n\r\n          spu.spuDetail = detail;\r\n        }\r\n        // 3.判断sku是否修改\r\n        // 3.1.处理sku\r\n        const skus = this.skus\r\n          .map(({title, price, stock, enable, images, indexes, id, ...rest}) => {\r\n            if(!enable){\r\n              return {id, enable:false}\r\n            }\r\n            const obj = {};\r\n            Object.values(rest).forEach(v => {\r\n              obj[v.id] = v.v;\r\n            });\r\n            return {\r\n              id,\r\n              title: title || spuTitle + \" \" + Object.values(obj).join(\" \"),\r\n              price: this.$format(price), // 价格需要格式化\r\n              stock,\r\n              indexes,\r\n              images: images ? images.join(\",\") : '', // 图片\r\n              specialSpec: JSON.stringify(obj) // 特有规格参数\r\n            };\r\n          });\r\n        // 3.3.判断sku是否修改\r\n        let isSkuChange = false;\r\n        for (let i = 0; i < skus.length; i++) {\r\n          let s = skus[i];\r\n          let os = this.oldGoods.skus.find(v => v.id === s.id);\r\n          if (!Object.compareObj(s, os)) {\r\n            isSkuChange = true;\r\n            if(!os && s.enable === false){\r\n              skus.splice(i, 1);\r\n              i--;\r\n            }else if(os && s.enable === false){\r\n              s.saleable = false;\r\n            }\r\n          }else{\r\n            skus.splice(i, 1);\r\n            i--;\r\n          }\r\n          s.spuId = id;\r\n        }\r\n        if (isSkuChange) {\r\n          spu.skus = skus;\r\n        }\r\n        if (isSpuChange || isSkuChange || isDetailChange) {\r\n          // 4.发起请求\r\n          this.$http.put(\"/item/goods\", spu)\r\n            .then(() => {\r\n              // 成功，关闭窗口\r\n              this.$emit(\"close\");\r\n              // 提示成功\r\n              this.$message.success(\"保存成功了\");\r\n            })\r\n            .catch(() => {\r\n              this.$message.error(\"保存失败！\");\r\n            });\r\n        } else {\r\n          // 成功，关闭窗口\r\n          this.$emit(\"close\");\r\n          // 提示成功\r\n          this.$message.warning(\"商品没有修改！\");\r\n        }\r\n      }\r\n    },\r\n    watch: {\r\n      oldGoods: {\r\n        deep: true,\r\n        handler(val) {\r\n          if (!this.isEdit) {\r\n            Object.assign(this.goods, {\r\n              categories: null, // 商品分类信息\r\n              brandId: 0, // 品牌id信息\r\n              name: \"\", // 标题\r\n              title: \"\", // 子标题\r\n              spuDetail: {\r\n                packingList: \"\", // 包装列表\r\n                afterService: \"\", // 售后服务\r\n                description: \"\" // 商品描述\r\n              }\r\n            });\r\n            this.specs = [];\r\n            this.specialSpecs = [];\r\n          } else {\r\n            this.goods = Object.deepCopy(val);\r\n\r\n            // 先得到分类名称\r\n            const names = val.categoryName.split(\"/\");\r\n            delete this.goods.categoryName;\r\n            delete this.goods.brandName;\r\n            delete this.goods.createTime;\r\n            delete this.goods.saleable;\r\n            // 组织商品分类数据\r\n            this.goods.categories = [\r\n              {id: val.cid1, name: names[0]},\r\n              {id: val.cid2, name: names[1]},\r\n              {id: val.cid3, name: names[2]}\r\n            ];\r\n\r\n            // 将skus处理成map\r\n            const skuMap = new Map();\r\n            this.goods.skus.forEach(s => {\r\n              s.enable = true;\r\n              skuMap.set(s.indexes, s);\r\n            });\r\n            this.goods.skus = skuMap;\r\n          }\r\n        }\r\n      },\r\n      \"goods.categories\": {\r\n        deep: true,\r\n        handler(val) {\r\n          // 判断商品分类是否存在，存在才查询\r\n          if (val && val.length > 0) {\r\n            // 根据分类查询品牌\r\n            this.$http\r\n              .get(\"/item/brand/of/category?id=\" + this.goods.categories[2].id)\r\n              .then(({data}) => {\r\n                this.brandOptions = data;\r\n              });\r\n            // 根据分类查询规格参数\r\n            this.$http\r\n              .get(\"/item/spec/params?categoryId=\" + this.goods.categories[2].id)\r\n              .then(({data}) => {\r\n                let specs = [];\r\n                let template = [];\r\n                if (this.isEdit) {\r\n                  specs = JSON.parse(this.goods.spuDetail.specification);\r\n                }\r\n                // 对特有规格进行筛选\r\n                const arr1 = [];\r\n                const arr2 = [];\r\n                data.forEach(({id, name, generic, numeric, unit, options}) => {\r\n                  if (generic) {\r\n                    const o = {id, name, numeric, unit, ops: options ? options.split(',') : []};\r\n                    if (this.isEdit) {\r\n                      o.v = specs[id];\r\n                    }\r\n                    arr1.push(o)\r\n                  } else {\r\n                    const o = {id, name, options: [], ops: options ? options.split(',') : []};\r\n                    if (this.isEdit) {\r\n                      o.options = specs[id];\r\n                    }\r\n                    arr2.push(o)\r\n                  }\r\n                });\r\n                this.specs = arr1;// 通用规格\r\n                this.specialSpecs = arr2;// 特有规格\r\n              });\r\n          }\r\n        }\r\n      },\r\n      goods: {\r\n        deep: true,\r\n        handler() {\r\n          if (this.isEdit) {\r\n            this.modified = true;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    computed: {\r\n      skus() {\r\n        // 过滤掉用户没有填写数据的规格参数\r\n        const arr = this.specialSpecs.filter(s => s.options.length > 0);\r\n        // 通过reduce进行累加笛卡尔积\r\n        return arr.reduce(\r\n          (last, spec, index) => {\r\n            const result = [];\r\n            last.forEach(o => {\r\n              spec.options.forEach((option, i) => {\r\n                const obj = JSON.parse(JSON.stringify(o));\r\n                obj[spec.name] = {v: option, id: spec.id};\r\n                obj.indexes = (obj.indexes || '') + '_' + i\r\n                if (index === arr.length - 1) {\r\n                  obj.indexes = obj.indexes.substring(1);\r\n                  // 如果发现是最后一组，则添加价格、库存等字段\r\n                  Object.assign(obj, {\r\n                    price: 0,\r\n                    stock: 0,\r\n                    enable: false,\r\n                    images: []\r\n                  });\r\n                  if (this.isEdit) {\r\n                    // 如果是编辑，则回填sku信息\r\n                    const sku = this.goods.skus.get(obj.indexes);\r\n                    if (sku != null) {\r\n                      const {title, price, stock, enable, images, id} = sku;\r\n                      Object.assign(obj, {\r\n                        id,\r\n                        price: this.$format(price),\r\n                        title,\r\n                        stock,\r\n                        enable,\r\n                        images: images ? images.split(\",\") : [],\r\n                      });\r\n                    }\r\n                  }\r\n                }\r\n                result.push(obj);\r\n              });\r\n            });\r\n            return result;\r\n          },\r\n          [{}]\r\n        );\r\n      },\r\n      headers() {\r\n        if (this.skus.length <= 0) {\r\n          return [];\r\n        }\r\n        const headers = [];\r\n        Object.keys(this.skus[0]).forEach(k => {\r\n          let value = k;\r\n          let width = \"\";\r\n          if (k === \"price\") {\r\n            // enable，表头要翻译成“价格”\r\n            k = \"价格\";\r\n            width = \"120px\";\r\n          } else if (k === \"stock\") {\r\n            // enable，表头要翻译成“库存”\r\n            width = \"120px\";\r\n            k = \"库存\";\r\n          } else if (k === \"enable\") {\r\n            // enable，表头要翻译成“是否启用”\r\n            width = \"80px\";\r\n            k = \"是否启用\";\r\n          } else if (k === \"images\" || k === 'indexes' || k === 'id' || k === 'title') {\r\n            // 图片和索引不在表格中展示\r\n            return;\r\n          }\r\n          headers.push({\r\n            text: k,\r\n            align: \"center\",\r\n            sortable: false,\r\n            value,\r\n            width\r\n          });\r\n        });\r\n        return headers;\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"]}]}