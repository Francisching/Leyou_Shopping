{"remainingRequest":"D:\\heima129\\leyou-manage\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\heima129\\leyou-manage\\src\\components\\form\\Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\heima129\\leyou-manage\\src\\components\\form\\Upload.vue","mtime":1581003219304},{"path":"D:\\heima129\\leyou-manage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\heima129\\leyou-manage\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\heima129\\leyou-manage\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"D:\\heima129\\leyou-manage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\heima129\\leyou-manage\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {Upload} from 'element-ui';\nimport fileUtil from './fileUtil';\n\n\nexport default {\n  name: \"vUpload\",\n  components: {\n    elUpload: Upload\n  },\n  props: {\n    url: {\n      type: String,\n      require: false\n    },\n    value: {},\n    multiple: {\n      type: Boolean,\n      default: true\n    },\n    picWidth: {\n      type: Number,\n      default: 150\n    },\n    picHeight: {\n      type: Number,\n      default: 150\n    },\n    needSignature: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      showBtn: false,\n      show: false,\n      dialogImageUrl: \"\",\n      avatarStyle: {\n        width: this.picWidth + 'px',\n        height: this.picHeight + 'px',\n        'line-height': this.picHeight + 'px'\n      },\n      fileList: [],\n      resp: {expire: 0}\n    }\n  },\n  mounted() {\n    if (!this.value || this.value.length <= 0) {\n      return;\n    }\n    if (this.multiple) {\n      this.fileList = this.value.map(f => {\n        return {response: f, url: f}\n      });\n    } else {\n      this.dialogImageUrl = this.value;\n    }\n  },\n  watch: {\n    value: {\n      deep: true,\n      handler(val) {\n        if ((typeof val) === \"string\") {\n          this.dialogImageUrl = val;\n        }\n      }\n    }\n  },\n  methods: {\n    async handleUpload(params) {\n      const file = params.file;\n      const fileType = file.type;\n      const isImage = fileType.indexOf('image') !== -1;\n\n      const isLt2M = file.size < 2 * 1024 * 1024;\n\n      if (!isLt2M) {\n        this.$message.error('上传图片或视频大小不能超过 2MB!');\n        return;\n      }\n\n      if (!isImage) {\n        this.$message.error('请选择图片!');\n        return;\n      }\n      // 准备文件名称\n      let filename = file.name;\n      let uploadUrl = this.url;\n      // 准备上传表单\n      const formData = new FormData();\n      // 是否需要签名\n      if (this.needSignature) {\n        // 判断之前签名是否有效，如果超时，则重新申请一个\n        if (this.resp.expire < new Date().getTime()) {\n          // 上传到阿里，进行签名，把接收到的url作为签名接口地址\n          this.resp = await this.$http.loadData(this.url);\n        }\n        // 修改文件名为随机文件名\n        filename = fileUtil.getFileName(filename, this.resp.dir);\n        // 修改上传文件路径\n        uploadUrl = this.resp.host;\n        // 准备请求参数\n        formData.append(\"key\", filename);\n        formData.append(\"policy\", this.resp.policy);\n        formData.append(\"OSSAccessKeyId\", this.resp.accessId);\n        formData.append(\"success_action_status\", '200');\n        formData.append(\"signature\", this.resp.signature);\n      }\n      formData.append(\"file\", file);\n      const that = this;\n      this.$http.post(uploadUrl, formData, {headers: {'Content-Type': 'multipart/form-data', 'x': 'y'}})\n        .then(resp => {\n          console.log(resp);\n          if (resp.status < '300') {\n            // 获取文件路径\n            const fileUrl = resp.data || uploadUrl + \"/\" + filename;\n            // 判断是多文件还是单文件\n            if (!this.multiple) {\n              // 单文件，直接获取地址即可；\n              this.dialogImageUrl = fileUrl;\n              this.$emit(\"input\", fileUrl)\n            } else {\n              // 多文件，放到集合中\n              const files = this.$refs.multiUpload.uploadFiles;\n              files[files.length - 1].response = fileUrl;\n              this.fileList = files;\n              this.$emit(\"input\", files.map(f => f.response))\n            }\n          } else {\n            that.$message.error('上传失败');\n          }\n        })\n        .catch(function (err) {\n          this.$message.error('上传失败');\n          console.log(err);\n        });\n    },\n    handleRemove(file, fileList) {\n      this.fileList = fileList;\n      this.$emit(\"input\", fileList.map(f => f.response))\n    },\n    handlePictureCardPreview(file) {\n      this.dialogImageUrl = file.response;\n      this.show = true;\n    },\n    removeSingle() {\n      this.dialogImageUrl = \"\";\n      this.$refs.singleUpload.clearFiles();\n    }\n  }\n}\n",{"version":3,"sources":["Upload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Upload.vue","sourceRoot":"src/components/form","sourcesContent":["<template>\r\n  <div>\r\n    <el-upload v-if=\"multiple\"\r\n               action=\"\"\r\n               list-type=\"picture-card\"\r\n               :on-preview=\"handlePictureCardPreview\"\r\n               :on-remove=\"handleRemove\"\r\n               ref=\"multiUpload\"\r\n               :file-list=\"fileList\"\r\n               :http-request=\"handleUpload\"\r\n    >\r\n      <i class=\"el-icon-plus\"></i>\r\n    </el-upload>\r\n    <el-upload ref=\"singleUpload\" v-else\r\n               action=\"\"\r\n               :style=\"avatarStyle\"\r\n               class=\"logo-uploader\"\r\n               :show-file-list=\"false\"\r\n               :http-request=\"handleUpload\"\r\n    >\r\n      <div @mouseover=\"showBtn=true\" @mouseout=\"showBtn=false\">\r\n        <i @click.stop=\"removeSingle\" v-show=\"dialogImageUrl && showBtn\" class=\"el-icon-close remove-btn\"></i>\r\n        <img v-if=\"dialogImageUrl\" :src=\"dialogImageUrl\" :style=\"avatarStyle\">\r\n        <i v-else class=\"el-icon-plus logo-uploader-icon\" :style=\"avatarStyle\"></i>\r\n      </div>\r\n    </el-upload>\r\n    <v-dialog v-model=\"show\" max-width=\"500\">\r\n      <img width=\"500px\" :src=\"dialogImageUrl\" alt=\"\">\r\n    </v-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import {Upload} from 'element-ui';\r\n  import fileUtil from './fileUtil';\r\n\r\n\r\n  export default {\r\n    name: \"vUpload\",\r\n    components: {\r\n      elUpload: Upload\r\n    },\r\n    props: {\r\n      url: {\r\n        type: String,\r\n        require: false\r\n      },\r\n      value: {},\r\n      multiple: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      picWidth: {\r\n        type: Number,\r\n        default: 150\r\n      },\r\n      picHeight: {\r\n        type: Number,\r\n        default: 150\r\n      },\r\n      needSignature: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        showBtn: false,\r\n        show: false,\r\n        dialogImageUrl: \"\",\r\n        avatarStyle: {\r\n          width: this.picWidth + 'px',\r\n          height: this.picHeight + 'px',\r\n          'line-height': this.picHeight + 'px'\r\n        },\r\n        fileList: [],\r\n        resp: {expire: 0}\r\n      }\r\n    },\r\n    mounted() {\r\n      if (!this.value || this.value.length <= 0) {\r\n        return;\r\n      }\r\n      if (this.multiple) {\r\n        this.fileList = this.value.map(f => {\r\n          return {response: f, url: f}\r\n        });\r\n      } else {\r\n        this.dialogImageUrl = this.value;\r\n      }\r\n    },\r\n    watch: {\r\n      value: {\r\n        deep: true,\r\n        handler(val) {\r\n          if ((typeof val) === \"string\") {\r\n            this.dialogImageUrl = val;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      async handleUpload(params) {\r\n        const file = params.file;\r\n        const fileType = file.type;\r\n        const isImage = fileType.indexOf('image') !== -1;\r\n\r\n        const isLt2M = file.size < 2 * 1024 * 1024;\r\n\r\n        if (!isLt2M) {\r\n          this.$message.error('上传图片或视频大小不能超过 2MB!');\r\n          return;\r\n        }\r\n\r\n        if (!isImage) {\r\n          this.$message.error('请选择图片!');\r\n          return;\r\n        }\r\n        // 准备文件名称\r\n        let filename = file.name;\r\n        let uploadUrl = this.url;\r\n        // 准备上传表单\r\n        const formData = new FormData();\r\n        // 是否需要签名\r\n        if (this.needSignature) {\r\n          // 判断之前签名是否有效，如果超时，则重新申请一个\r\n          if (this.resp.expire < new Date().getTime()) {\r\n            // 上传到阿里，进行签名，把接收到的url作为签名接口地址\r\n            this.resp = await this.$http.loadData(this.url);\r\n          }\r\n          // 修改文件名为随机文件名\r\n          filename = fileUtil.getFileName(filename, this.resp.dir);\r\n          // 修改上传文件路径\r\n          uploadUrl = this.resp.host;\r\n          // 准备请求参数\r\n          formData.append(\"key\", filename);\r\n          formData.append(\"policy\", this.resp.policy);\r\n          formData.append(\"OSSAccessKeyId\", this.resp.accessId);\r\n          formData.append(\"success_action_status\", '200');\r\n          formData.append(\"signature\", this.resp.signature);\r\n        }\r\n        formData.append(\"file\", file);\r\n        const that = this;\r\n        this.$http.post(uploadUrl, formData, {headers: {'Content-Type': 'multipart/form-data', 'x': 'y'}})\r\n          .then(resp => {\r\n            console.log(resp);\r\n            if (resp.status < '300') {\r\n              // 获取文件路径\r\n              const fileUrl = resp.data || uploadUrl + \"/\" + filename;\r\n              // 判断是多文件还是单文件\r\n              if (!this.multiple) {\r\n                // 单文件，直接获取地址即可；\r\n                this.dialogImageUrl = fileUrl;\r\n                this.$emit(\"input\", fileUrl)\r\n              } else {\r\n                // 多文件，放到集合中\r\n                const files = this.$refs.multiUpload.uploadFiles;\r\n                files[files.length - 1].response = fileUrl;\r\n                this.fileList = files;\r\n                this.$emit(\"input\", files.map(f => f.response))\r\n              }\r\n            } else {\r\n              that.$message.error('上传失败');\r\n            }\r\n          })\r\n          .catch(function (err) {\r\n            this.$message.error('上传失败');\r\n            console.log(err);\r\n          });\r\n      },\r\n      handleRemove(file, fileList) {\r\n        this.fileList = fileList;\r\n        this.$emit(\"input\", fileList.map(f => f.response))\r\n      },\r\n      handlePictureCardPreview(file) {\r\n        this.dialogImageUrl = file.response;\r\n        this.show = true;\r\n      },\r\n      removeSingle() {\r\n        this.dialogImageUrl = \"\";\r\n        this.$refs.singleUpload.clearFiles();\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .logo-uploader {\r\n    border: 1px dashed #d9d9d9;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    position: relative;\r\n    overflow: hidden;\r\n    float: left;\r\n  }\r\n\r\n  .logo-uploader:hover {\r\n    border-color: #409EFF;\r\n  }\r\n\r\n  .logo-uploader-icon {\r\n    font-size: 28px;\r\n    color: #8c939d;\r\n    text-align: center;\r\n  }\r\n\r\n  .remove-btn {\r\n    position: absolute;\r\n    right: 0;\r\n    font-size: 16px;\r\n  }\r\n\r\n  .remove-btn:hover {\r\n    color: #c22;\r\n  }\r\n</style>\r\n"]}]}